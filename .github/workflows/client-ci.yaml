name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'client/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'client/**'

defaults:
  run:
    working-directory: client

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: |
        echo "Running ESLint..."
        npm run lint
      continue-on-error: false
      
    - name: Run Prettier check
      run: |
        echo "Checking code formatting..."
        if npm run format:check; then
          echo "Code formatting is correct!"
        else
          echo "Code formatting issues found!"
          echo "Run 'npm run format' to fix formatting issues."
          exit 1
        fi
      continue-on-error: false
      
    - name: TypeScript type checking
      run: |
        echo "Running TypeScript type checking..."
        npm run type-check
      continue-on-error: false

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      if: success()
      run: |
        echo "Running tests..."
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm run test
        else
          echo "No test script found, skipping tests"
        fi
      continue-on-error: false
      
    - name: Build application
      run: |
        echo "Building application for Node.js ${{ matrix.node-version }}..."
        npm run build
      env:
        NODE_ENV: production
        
    - name: Verify build output
      run: |
        echo "Build completed successfully!"
        echo "Build artifacts:"
        ls -la dist/
        echo "Build size: $(du -sh dist | cut -f1)"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20'
      with:
        name: build-files-${{ github.sha }}
        path: client/dist/
        retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        echo "Running security audit..."
        npm audit --audit-level=moderate
      continue-on-error: false

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for analysis
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Analyze bundle size
      uses: preactjs/compressed-size-action@v2
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        pattern: "./client/dist/**/*.{js,css,html}"
        exclude: "{**/*.map,**/node_modules/**}"

  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-audit]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files-${{ github.sha }}
        path: client/dist/
        
    - name: Deployment readiness check
      run: |
        echo "Checking deployment readiness..."
        
        if [ ! -f "dist/index.html" ]; then
          echo "index.html not found in build output"
          exit 1
        fi
        
        if [ $(find dist -name "*.js" | wc -l) -eq 0 ]; then
          echo "No JavaScript files found in build output"
          exit 1
        fi
        
        echo "All deployment checks passed!"
        echo "Ready for deployment to $([ '${{ github.ref }}' = 'refs/heads/main' ] && echo 'production' || echo 'staging')"