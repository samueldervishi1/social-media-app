name: Frontend Code Quality Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
    paths:
      - 'client/**'

defaults:
  run:
    working-directory: client

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: |
        npm run lint -- --format=@microsoft/eslint-formatter-sarif --output-file=eslint-results.sarif
      continue-on-error: true
      
    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: client/eslint-results.sarif
        wait-for-processing: true
        
    - name: Run Prettier check
      run: |
        if ! npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md}" --ignore-path .prettierignore; then
          echo "Code formatting issues found!"
          echo ""
          echo "To fix formatting issues, run:"
          echo "   cd client && npx prettier --write \"**/*.{ts,tsx,js,jsx,json,css,md}\""
          echo ""
          echo "Files with formatting issues:"
          npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md}" --ignore-path .prettierignore || true
          exit 1
        else
          echo "Code formatting is correct!"
        fi
        
    - name: TypeScript compilation check
      run: |
        if npm run type-check; then
          echo "TypeScript compilation successful!"
        else
          echo "TypeScript compilation errors found!"
          echo "Please fix the type errors above."
          exit 1
        fi
        
    - name: Check for unused dependencies
      run: |
        echo "Checking for unused dependencies..."
        npx depcheck --ignores="@types/*,eslint-*,prettier,typescript,vite,@vitejs/*" || true
      continue-on-error: true
      
    - name: Generate code quality report
      run: |
        echo "## Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Analysis Results:" >> $GITHUB_STEP_SUMMARY
        echo "- ESLint analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- Prettier formatting checked" >> $GITHUB_STEP_SUMMARY
        echo "- TypeScript compilation verified" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Project Stats:" >> $GITHUB_STEP_SUMMARY
        echo "- **Total TypeScript files**: $(find . -name '*.ts' -o -name '*.tsx' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **Total JavaScript files**: $(find . -name '*.js' -o -name '*.jsx' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **Lines of code**: $(find . -name '*.ts' -o -name '*.tsx' -o -name '*.js' -o -name '*.jsx' | xargs wc -l | tail -1 | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
        echo "- **Components**: $(find . -path './src/components' -name '*.tsx' -o -name '*.jsx' | wc -l)" >> $GITHUB_STEP_SUMMARY

  accessibility-check:
    name: Accessibility & Build Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: |
        echo "Building application..."
        npm run build
      env:
        NODE_ENV: production
        
    - name: Check build output
      run: |
        echo "Build completed successfully!"
        echo "Build size: $(du -sh dist | cut -f1)"
        echo "JavaScript files: $(find dist -name '*.js' | wc -l)"
        echo "CSS files: $(find dist -name '*.css' | wc -l)"
        
    - name: Run accessibility tests
      run: |
        echo "Running accessibility tests..."
        npx @axe-core/cli ./dist --exit
      continue-on-error: true

  performance-check:
    name: Performance & Bundle Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Analyze bundle size
      run: |
        echo "Analyzing bundle size..."
        if command -v npx bundlesize &> /dev/null; then
          npx bundlesize
        else
          echo "bundlesize not configured, showing basic size info:"
          du -sh dist/*
        fi
      continue-on-error: true
        
    - name: Generate performance report
      run: |
        echo "## Performance Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Bundle Analysis:" >> $GITHUB_STEP_SUMMARY
        du -sh dist/* | while read size file; do
          echo "- **$(basename $file)**: $size" >> $GITHUB_STEP_SUMMARY
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Stats:" >> $GITHUB_STEP_SUMMARY
        echo "- **Total build size**: $(du -sh dist | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- **JavaScript chunks**: $(find dist -name '*.js' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **CSS files**: $(find dist -name '*.css' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **Asset files**: $(find dist -type f ! -name '*.js' ! -name '*.css' ! -name '*.html' | wc -l)" >> $GITHUB_STEP_SUMMARY